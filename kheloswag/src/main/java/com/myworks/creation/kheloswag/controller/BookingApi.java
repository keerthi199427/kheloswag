/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.myworks.creation.kheloswag.controller;

import com.myworks.creation.kheloswag.model.BookingError;
import com.myworks.creation.kheloswag.model.NewBookingList;
import com.myworks.creation.kheloswag.model.NewBookingRequest;
import com.myworks.creation.kheloswag.model.NewBookingResponse;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;

@Api(value = "Booking", description = "the Booking API")
public interface BookingApi {

    Logger log = LoggerFactory.getLogger(BookingApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Booking a new Ground", nickname = "createBooking", notes = "", response = NewBookingResponse.class, tags={ "booking", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = NewBookingResponse.class),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Un Authorized"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = BookingError.class) })
    @RequestMapping(value = "/v1/bookings",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<NewBookingResponse> _createBooking(@ApiParam(value = "create a new booking and return the details" ,required=true )  @Valid @RequestBody NewBookingRequest newBookingRequest) {
        return createBooking(newBookingRequest);
    }

    // Override this method
    default ResponseEntity<NewBookingResponse> createBooking(NewBookingRequest newBookingRequest) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"gameId\" : \"1\",  \"districtName\" : \"Chandigarh\",  \"gameName\" : \"Volley ball\",  \"stateName\" : \"Punjab\",  \"gameStartTime\" : \"06:00, 10:00, 14:00, 18:00\",  \"gameEndTime\" : \"09:00, 13:00, 17:00, 21:00\",  \"bookingActive\" : true,  \"userId\" : \"123\",  \"gameBookingDate\" : \"2019-10-31\",  \"bookingId\" : \"123\",  \"groundName\" : \"ZPH - Villur\"}", NewBookingResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default BookingApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "List of Bookings for particular User", nickname = "getBookingListForUserId", notes = "", response = NewBookingList.class, tags={ "booking", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = NewBookingList.class),
        @ApiResponse(code = 500, message = "successful operation", response = BookingError.class) })
    @RequestMapping(value = "/v1/bookings/{userId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<NewBookingList> _getBookingListForUserId(@ApiParam(value = "ID of User to return list of bookings",required=true) @PathVariable("userId") String userId) {
        return getBookingListForUserId(userId);
    }

    // Override this method
    default ResponseEntity<NewBookingList> getBookingListForUserId(String userId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"bookingsList\" : [ {    \"gameId\" : \"1\",    \"districtName\" : \"Chandigarh\",    \"gameName\" : \"Volley ball\",    \"stateName\" : \"Punjab\",    \"gameStartTime\" : \"06:00, 10:00, 14:00, 18:00\",    \"gameEndTime\" : \"09:00, 13:00, 17:00, 21:00\",    \"bookingActive\" : true,    \"userId\" : \"123\",    \"gameBookingDate\" : \"2019-10-31\",    \"bookingId\" : \"123\",    \"groundName\" : \"ZPH - Villur\"  }, {    \"gameId\" : \"1\",    \"districtName\" : \"Chandigarh\",    \"gameName\" : \"Volley ball\",    \"stateName\" : \"Punjab\",    \"gameStartTime\" : \"06:00, 10:00, 14:00, 18:00\",    \"gameEndTime\" : \"09:00, 13:00, 17:00, 21:00\",    \"bookingActive\" : true,    \"userId\" : \"123\",    \"gameBookingDate\" : \"2019-10-31\",    \"bookingId\" : \"123\",    \"groundName\" : \"ZPH - Villur\"  } ]}", NewBookingList.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default BookingApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
